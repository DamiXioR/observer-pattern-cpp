@startuml

class IEventInformer {
    +virtual ~IEventInformer(){}; (implementation)
    +virtual void addNewEvent(std::string incomingEvent); (implementation)
    +virtual std::vector<std::string> getEvents() const; (implementation)

    #std::vector<std::string> events_;
}

class DarkElvesEventInformer {
}

class DragonsEventInformer {
}

IEventInformer <|-- DarkElvesEventInformer
IEventInformer <|-- DragonsEventInformer


class IEventListener {
    +virtual ~IEventListener(){}; (implementation)
    +virtual void updateInformations() = 0;
    +virtual void updateInformations(std::string informationContent) = 0;
    +virtual void addInformer(IEventInformer* eventInformer); (implementation)
    +virtual void checkInformer(); (implementation)

    #IEventInformer* eventInformers_{};
}

class Player {
    +Player(std::string name);
    +void updateInformations(); (override)
    +void updateInformations(std::string informationContent); (override)

    -std::string name_{};
}

IEventListener <|-- Player


IEventInformer - IEventListener

@enduml